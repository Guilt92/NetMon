#!/bin/bash

set -e

ORANGE=$(echo -ne '\e[38;5;214m')
BLUE=$(echo -ne '\e[94m')
RED=$(echo -ne '\e[31m')
GREEN=$(echo -ne '\e[32m')
ENDCOLOR=$(echo -ne '\e[0m')
YELLOW=$(echo -ne '\033[0;33m')
CYAN=$(echo -ne '\e[36m')
MAGENTA=$(echo -ne '\e[35m')
PURPLE=$(echo -ne '\e[38;5;129m')
WHITE=$(echo -ne '\e[97m')

check_user_root(){
    if [ "$EUID" -ne 0 ]; then 
        echo -e ""
        echo -e "${RED}This script must be run as root. Please switch to the root user and try again.${ENDCOLOR}"
        exit 1
    fi
}
clear
check_user_root
sleep 1;


INSTALL_DIR="/opt/monitoring"
DASHBOARD_JSON="dashboard.json"
GRAFANA_ADMIN_USER="admin"
GRAFANA_ADMIN_PASS="admin"

fetch_versions() {
    PROMETHEUS_VERSION=$(curl -s https://github.com/prometheus/prometheus/releases | grep -oP 'v\d+\.\d+\.\d+' | head -n 1 | sed 's/^v//')
    NODE_EXPORTER_VERSION=$(curl -s https://github.com/prometheus/node_exporter/releases | grep -oP 'v\d+\.\d+\.\d+' | head -n 1 | sed 's/^v//' )
    GRAFANA_VERSION=$(curl -s https://api.github.com/repos/grafana/grafana/releases/latest | jq -r .tag_name | sed 's/^v//')

    if [[ -z $PROMETHEUS_VERSION || -z $NODE_EXPORTER_VERSION || -z $GRAFANA_VERSION ]]; then
        echo -e "${RED}[ERROR]${ENDCOLOR} Failed to fetch versions. Please check your internet connection."
        exit 1
    fi

    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Fetched latest versions:"
    echo -e "  Prometheus: ${CYAN}$PROMETHEUS_VERSION${ENDCOLOR}"
    echo -e "  Node Exporter: ${CYAN}$NODE_EXPORTER_VERSION${ENDCOLOR}"
    echo -e "  Grafana: ${CYAN}$GRAFANA_VERSION${ENDCOLOR}"
    
    export  PROMETHEUS_VERSION
    export NODE_EXPORTER_VERSION
    export GRAFANA_VERSION

}

setup_prerequisites() {
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${CYAN}Updating system and installing prerequisites...${ENDCOLOR}"
    apt update -y
    apt install -y wget tar unzip apt-transport-https software-properties-common curl jq
}

install_prometheus() {
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${MAGENTA}Installing Prometheus...${ENDCOLOR}"
    mkdir -p $INSTALL_DIR/prometheus
    cd $INSTALL_DIR/prometheus
    wget https://github.com/prometheus/prometheus/releases/download/v$PROMETHEUS_VERSION/prometheus-$PROMETHEUS_VERSION.linux-amd64.tar.gz
    tar xvfz prometheus-$PROMETHEUS_VERSION.linux-amd64.tar.gz --strip-components=1
    cat <<EOL > prometheus.yml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['localhost:9100']
EOL
    nohup ./prometheus --config.file=prometheus.yml --storage.tsdb.path="$INSTALL_DIR/prometheus/data" &
    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Prometheus installed."
}

install_node_exporter() {
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${ORANGE}Installing Node Exporter...${ENDCOLOR}"
    mkdir -p $INSTALL_DIR/node_exporter
    cd $INSTALL_DIR/node_exporter
    wget https://github.com/prometheus/node_exporter/releases/download/v$NODE_EXPORTER_VERSION/node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz
    tar xvfz node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz --strip-components=1
    nohup ./node_exporter &
    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Node Exporter installed."
}

nameserver_dns(){
echo -e "nameserver 185.51.200.2\nnameserver 178.22.122.100" | sudo tee -a /etc/resolv.conf > /dev/null
}

install_grafana() {
    nameserver_dns
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${YELLOW}Installing Grafana...${ENDCOLOR}"
    curl https://packages.grafana.com/gpg.key | sudo tee /etc/apt/trusted.gpg.d/grafana.asc
    echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
    sudo apt update 2>/dev/null
    sudo apt install -y grafana
    sudo systemctl start grafana-server
    sudo systemctl enable grafana-server
    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Grafana installed."
}

configure_grafana() {
  echo -e "${BLUE}[INFO]${ENDCOLOR} ${CYAN}Adding Data Source to Grafana...${ENDCOLOR}"

  GRAFANA_URL="http://$(hostname -I | awk '{print $1}'):3000"
  echo "Connecting to Grafana at: $GRAFANA_URL"
  
  PROMETHEUS_URL="http://$(hostname -I | awk '{print $1}'):9090"
  echo "Adding Prometheus data source at: $PROMETHEUS_URL"

  curl -u $GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASS -X POST $GRAFANA_URL/api/datasources -H "Content-Type: application/json" -d '{
    "name": "Prometheus",
    "type": "prometheus",
    "url": "'$PROMETHEUS_URL'",
    "access": "proxy",
    "isDefault": true
  }'

  echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Data Source added."
}
    
add_dashboard() {
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${PURPLE}Adding Dashboard to Grafana...${ENDCOLOR}"
    mkdir -p /var/lib/grafana/dashboards/
    CURRENT_DIR=$(pwd)
    echo "Current directory: $CURRENT_DIR"
    if [ -f "$CURRENT_DIR/Dashboards-1.json" ] && [ -f "$CURRENT_DIR/Dashboards-2.json" ]; then
        cp "$CURRENT_DIR/Dashboards-1.json" /var/lib/grafana/dashboards/
        cp "$CURRENT_DIR/Dashboards-2.json" /var/lib/grafana/dashboards/
    else
        echo -e "${RED}[ERROR]${ENDCOLOR} Dashboard files not found in $CURRENT_DIR."
        exit 1
    fi
    mkdir -p /etc/grafana/provisioning/dashboards
    
    cat <<EOF > /etc/grafana/provisioning/dashboards/dashboards.yaml
apiVersion: 1
providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    options:
      path: /var/lib/grafana/dashboards
EOF

    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Dashboard added."
}

uninstall() {
    echo -e "${RED}[INFO]${ENDCOLOR} ${CYAN}Uninstalling all components...${ENDCOLOR}"

    echo -e "${BLUE}[INFO]${ENDCOLOR} Stopping Grafana service..."
    systemctl stop grafana-server 2>/dev/null || true
    systemctl disable grafana-server 2>/dev/null || true
    apt remove --purge -y grafana 2>/dev/null || true
    rm -rf /var/lib/grafana /etc/grafana /usr/share/grafana 2>/dev/null || true

    echo -e "${BLUE}[INFO]${ENDCOLOR} Stopping Prometheus..."
    pkill prometheus 2>/dev/null || true
    rm -rf $INSTALL_DIR/prometheus 2>/dev/null || true

    echo -e "${BLUE}[INFO]${ENDCOLOR} Stopping Node Exporter..."
    pkill node_exporter 2>/dev/null || true
    rm -rf $INSTALL_DIR/node_exporter 2>/dev/null || true

    echo -e "${BLUE}[INFO]${ENDCOLOR} Removing installation directory..."
    rm -rf $INSTALL_DIR 2>/dev/null || true

    echo -e "${BLUE}[INFO]${ENDCOLOR} Cleaning up additional files..."
    rm -f /etc/apt/sources.list.d/grafana.list 2>/dev/null || true
    rm -f /etc/apt/trusted.gpg.d/grafana.asc 2>/dev/null || true

    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Uninstallation complete. All components have been removed."
}

if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}[ERROR]${ENDCOLOR} Please run this script as root."
    exit 1
fi


information(){
    clear 
    echo -e "${GREEN}[SUCCESS]${ENDCOLOR} Monitoring system successfully deployed."
    echo -e "${YELLOW}Access Grafana at: ${CYAN}http://$(hostname -I | awk '{print $1}'):3000${ENDCOLOR}"
    echo -e "${YELLOW}Username: ${CYAN}$GRAFANA_ADMIN_USER${ENDCOLOR}"
    echo -e "${YELLOW}Password: ${CYAN}$GRAFANA_ADMIN_PASS${ENDCOLOR}"
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${CYAN}Visit Prometheus at: http://$(hostname -I | awk '{print $1}'):9090${ENDCOLOR}"
    echo -e "${BLUE}[INFO]${ENDCOLOR} ${CYAN}Visit Node Exporter metrics at: http://$(hostname -I | awk '{print $1}'):9100/metrics${ENDCOLOR}"

}

 install_fn(){
    setup_prerequisites
    fetch_versions
    install_prometheus
    install_node_exporter
    install_grafana
    configure_grafana
    add_dashboard
 }


while true; do
    clear
    echo -e "${BLUE}\e[5m‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${ENDCOLOR}"
    echo -e "                    ${GREEN}üî• Network Monitoring üî•${ENDCOLOR}"
    echo -e "              ${CYAN} https://github.com/Niihil/NetMon.git  ${ENDCOLOR}"
    echo -e "${BLUE}\e[5m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${ENDCOLOR}"
    echo -e "${RED}============================ ${ENDCOLOR}"
    echo -e "${RED}1. ${ENDCOLOR} Install ${ENDCOLOR}"
    echo -e "${RED}2. ${ENDCOLOR} Uninstall ${ENDCOLOR}"
    echo -e "${RED}3. ${ENDCOLOR} Exit ${ENDCOLOR}"
    echo -e "${RED}============================ ${ENDCOLOR}"
    
    read -p "$(echo -e "${BLUE}Please enter your choice: ${ENDCOLOR}")" choice
    case $choice in
        1) install_fn; sleep 1; information; sleep 5; exit ;;
        2) uninstall; break ;;
        3) echo -e "${GREEN}Exiting...${ENDCOLOR}"; exit ;;
        *) echo -e "${RED}Invalid option, please try again.${ENDCOLOR}" ;;
    esac
    sleep 1
done



